/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: daspanjo (https://sketchfab.com/daspanjo)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/candy-house-fb97f8d420634027bc0e2c1ff4cd9bd5
Title: Candy House
*/

import { useRef, useEffect } from "react";
import { useGLTF } from "@react-three/drei";
import { useFrame, useThree } from "@react-three/fiber";

// packege that makes enable animation. so "a" is from 'animated'
import { a } from "@react-spring/three";

import CandyHouseScene from "../assets/3d/candy_house.glb";

const CandyHouse = ({
  isRotating,
  setIsRotating,
  setCurrentStage,
  ...props
}) => {
  // seRef is a React Hook that provides a way to create a mutable object that persists throughout the lifecycle of a component. manipulate properties of the 3D object represented by the CandyHouse component.

  const CandyHouseRef = useRef(); //para candy house

  const { gl, viewport } = useThree();
  const { nodes, materials } = useGLTF(CandyHouseScene);

  const lastX = useRef(0);
  const rotationSpeed = useRef(0);
  // how much is continue moving after the start rotationg the CandyHouse
  const dampingFactor = 0.95;

  // To start the rotation
  const handlePointerDown = (e) => {
    e.stopPropagation();
    e.preventDefault();
    setIsRotating(true);

    const clientX = e.touches ? e.touches[0].clientX : e.clientX;

    lastX.current = clientX;
  };

  //To stop the rotation
  const handlePointerUp = (e) => {
    e.stopPropagation();
    e.preventDefault();
    setIsRotating(false);
  };
  const handleKeyDown = (e) => {
    if (e.key === "ArrowLeft") {
      if (!isRotating) setIsRotating(true);
      CandyHouseRef.current.rotation.y += 0.01 * Math.PI;
      rotationSpeed.current = 0.0125;
    } else if (e.key === "ArrowRight") {
      if (!isRotating) setIsRotating(true);
      CandyHouseRef.current.rotation.y -= 0.01 * Math.PI;
      rotationSpeed.current = -0.0125;
    }
  };
  const handleKeyUp = (e) => {
    if (e.key === "ArrowLeft" || e.key === "ArrowRight") setIsRotating(false);
  };

  const handlePointerMove = (e) => {
    e.stopPropagation();
    e.preventDefault();

    if (isRotating) {
      const clientX = e.touches ? e.touches[0].clientX : e.clientX;

      const delta = (clientX - lastX.current) / viewport.width;

      CandyHouseRef.current.rotation.z += delta * 0.01 * Math.PI;

      lastX.current = clientX;

      rotationSpeed.current = delta * 0.01 * Math.PI;
    }
  };

  // updating the rotation of the 3D CandyHouse when it is not actively being rotated by user input
  useFrame(() => {
    if (!isRotating) {
      rotationSpeed.current *= dampingFactor;
      if (Math.abs(rotationSpeed.current) < 0.001) {
        rotationSpeed.current = 0;
      }
      CandyHouseRef.current.rotation.z += rotationSpeed.current;
    } else {
      const rotation = CandyHouseRef.current.rotation.z;

      //  to normalized the rotation values to snsure it stay within the range [0.2 * Math.PI]
      const normalizedRotation =
        ((rotation % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI);

      switch (true) {
        case normalizedRotation >= 5.45 && normalizedRotation <= 5.85:
          setCurrentStage(4);
          break;
        case normalizedRotation >= 0.85 && normalizedRotation <= 1.3:
          setCurrentStage(3);
          break;
        case normalizedRotation >= 2.4 && normalizedRotation <= 2.6:
          setCurrentStage(2);
          break;
        case normalizedRotation >= 4.25 && normalizedRotation <= 4.75:
          setCurrentStage(1);
          break;
        default:
          setCurrentStage(null);
      }
    }
  });

  useEffect(() => {
    const canvas = gl.domElement;
    canvas.addEventListener("pointerdown", handlePointerDown);
    canvas.addEventListener("pointermove", handlePointerMove);
    canvas.addEventListener("pointerup", handlePointerUp);
    document.addEventListener("keydown", handleKeyUp);
    document.addEventListener("keyup", handleKeyDown);

    return () => {
      canvas.removeEventListener("pointerdown", handlePointerDown);
      canvas.removeEventListener("pointerup", handlePointerUp);
      canvas.removeEventListener("pointermove", handlePointerMove);
      document.removeEventListener("keydown", handleKeyUp);
      document.removeEventListener("keyup", handleKeyDown);
    };
  }, [gl, handlePointerDown, handlePointerMove, handlePointerUp]);

  // useGLTF is used to load the 3D model from the specified GLB file

  return (
    <a.group {...props} ref={CandyHouseRef}>
      <mesh
        geometry={nodes.Plane_CandyTex_0.geometry}
        material={materials.CandyTex}
      />
      <mesh
        geometry={nodes.Plane_CupTex_0.geometry}
        material={materials.CupTex}
      />
      <mesh
        geometry={nodes.Plane_CubBlue_0.geometry}
        material={materials.CubBlue}
      />
      <mesh
        geometry={nodes.Plane_Straw_0.geometry}
        material={materials.Straw}
      />
      <mesh geometry={nodes.Plane_Wall_0.geometry} material={materials.Wall} />
      <mesh geometry={nodes.Plane_Roof_0.geometry} material={materials.Roof} />
      <mesh geometry={nodes.Plane_Wood_0.geometry} material={materials.Wood} />
      <mesh
        geometry={nodes.Plane_WaffleDark_0.geometry}
        material={materials.WaffleDark}
      />
      <mesh
        geometry={nodes.Plane_CandyTreeSec_0.geometry}
        material={materials.CandyTreeSec}
      />
      <mesh
        geometry={nodes.Plane_CandyTreePrim_0.geometry}
        material={materials.CandyTreePrim}
      />
      <mesh
        geometry={nodes.Plane_WindowBase_0.geometry}
        material={materials.WindowBase}
      />
      <mesh
        geometry={nodes.Plane_WindowDark_0.geometry}
        material={materials.WindowDark}
      />
      <mesh
        geometry={nodes.Plane_AxeHandle_0.geometry}
        material={materials.AxeHandle}
      />
      <mesh
        geometry={nodes.Plane_AxeSec_0.geometry}
        material={materials.AxeSec}
      />
      <mesh
        geometry={nodes.Plane_AxePrim_0.geometry}
        material={materials.AxePrim}
      />

      <mesh
        geometry={nodes.Plane_LollipopHandle_0.geometry}
        material={materials.LollipopHandle}
      />
      <mesh
        geometry={nodes.Plane_Lollipop_0.geometry}
        material={materials.Lollipop}
      />
    </a.group>
  );
};
export default CandyHouse;
